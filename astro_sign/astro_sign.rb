# Подключаем нужные библиотеки
require 'json'
require 'date'

# Прочитаем файл со знаками зодиака и сразу запишем данные в хэш
# Это делается с помощью специального класса JSON
file = File.read('signs.json', encoding: 'utf-8')
signs = JSON.parse(file)

# Спросим у пользователя дату его рождения
puts "Когда вы родились (укажите дату в формате ДД.ММ, например, 08.03)"
input_date = STDIN.gets.chomp

# Создадим объект класса Date и запишем в него дату рождения
# Нам не важен год, поэтому везде будем ставить 2000-й, чтобы метод Parse мог взять конкретную дату
user_birth_date = Date.parse(input_date + '.2000')

# Теперь пройдёмся по всем ключам нашего ассоциативного массива и найдём нужный знак
user_sign = nil

# Для ассоциативных массивов, как и для обычных, тоже есть метод each
signs.each do |sign_key, sign|

  # Разобьём даты в массив из двух элементов знакомым методом split
  dates = sign['dates'].split('..')

  # У объектов класса Date определены методы больше и меньше
  # Они позволяют сравнивать даты как числа
  # Если день рождения пользователя попадает между датами какого-то знака зодиака,
  # записываем результат в переменную user_sign
  if (Date.parse(dates[0] + '.2000') <= user_birth_date) &&
      (user_birth_date <= Date.parse(dates[1] + '.2000'))
    user_sign = sign
  end
end

# Наконец, выведем пользователю его описание знака
puts user_sign['dates']
puts user_sign['text']